<<
/* parser.dlg -- DLG Description of scanner
 *
 * Generated from: karel.g
 *
 * Terence Parr, Will Cohen, and Hank Dietz: 1989-2001
 * Purdue University Electrical Engineering
 * With AHPCRC, University of Minnesota
 * ANTLR Version 1.33MR33
 */

#define ANTLR_VERSION	13333
#include "pcctscfg.h"
#include "pccts_stdio.h"

#include <string>
#include <iostream>
#include <map>
#include <vector>
#include <tuple>
using namespace std;

// struct to store information about tokens
typedef struct {
  string kind;
  string text;
} Attrib;

typedef std::tuple<int,int,int> i3tuple;

// function to fill token information (predeclaration)
void zzcr_attr(Attrib *attr, int type, char *text);

// fields for AST nodes
#define AST_FIELDS string kind; string text;
#include "ast.h"

// macro to create a new AST node (and function predeclaration)
#define zzcr_ast(as,attr,ttype,textt) as=createASTnode(attr,ttype,textt)
AST* createASTnode(Attrib* attr,int ttype, char *textt);
#include "antlr.h"
#include "ast.h"
#include "tokens.h"
#include "dlgdef.h"
LOOKAHEAD

void
#ifdef __USE_PROTOS
zzerraction(void)
#else
zzerraction()
#endif
{
	(*zzerr)("invalid token");
	zzadvance();
	zzskip();
}
>>


%%START

@
	<<
		NLA = 1;
	>>

[\ \n]
	<<
		NLA = SPACE;
    zzskip();  
	>>

[0-9]+
	<<
		NLA = NUM;
	>>

\(
	<<
		NLA = LPAREN;
	>>

\)
	<<
		NLA = RPAREN;
	>>

\[
	<<
		NLA = LBRA;
	>>

\]
	<<
		NLA = RBRA;
	>>

\{
	<<
		NLA = LKEY;
	>>

\}
	<<
		NLA = RKEY;
	>>

world
	<<
		NLA = WORLD;
	>>

robot
	<<
		NLA = ROBOT;
	>>

walls
	<<
		NLA = WALLS;
	>>

beepers
	<<
		NLA = BEEPERS;
	>>

\,
	<<
		NLA = COMMA;
	>>

\;
	<<
		NLA = SEMICOLON;
	>>

define
	<<
		NLA = DEFINE;
	>>

turnoff
	<<
		NLA = TURNOFF;
	>>

if
	<<
		NLA = IF;
	>>

and
	<<
		NLA = AND;
	>>

or
	<<
		NLA = OR;
	>>

not
	<<
		NLA = NOT;
	>>

move
	<<
		NLA = MOVE;
	>>

turnleft
	<<
		NLA = TURNLEFT;
	>>

putbeeper
	<<
		NLA = PUTBEEPER;
	>>

pickbeeper
	<<
		NLA = PICKBEEPER;
	>>

isClear
	<<
		NLA = ISCLEAR;
	>>

foundBeeper
	<<
		NLA = FOUNDBEEPER;
	>>

anyBeepersInBag
	<<
		NLA = ANYBEEPERSINBAG;
	>>

iterate
	<<
		NLA = ITERATE;
	>>

begin
	<<
		NLA = BEGIN;
	>>

end
	<<
		NLA = END;
	>>

([A-Z]|[a-z])(([A-Z]|[a-z])*[0-9]*)
	<<
		NLA = ID;
	>>

%%
